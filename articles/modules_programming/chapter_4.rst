第四章 资源文件
===============

资源文件存储win32汇编程序需要用到的资源，以 ``.rc/.res`` 为后缀。
.rc文件是未经编译的资源文件，.res是经过资源编译器 ``rc.exe`` 编译的二进制文件。

使用资源文件体现了模块化编程的思想，将程序用到的资源集中存放到资源模块里，
然后通过链接整合到.exe文件中。
你完全可以将所有用到的资源在代码里实现，只是这样做的后果是：

* 代码臃肿不堪
* 可读性差
* 不易修改
* 容易出bug
 
程序中可能用到的资源有：

* 菜单
* 加速键
* 图标
* 光标
* 字符串表
* 图片
* 其他资源，比如音频和视频资源等
 
菜单和加速键
------------

.. note::
	在资源文件中使用中文，资源文件必须为UTF-16LE/UTF-16BE存储方式，否则中文显示为乱码。


1. 菜单资源的定义
   
   菜单是可视化窗口的重要组成部分，是用户指令的集中体现。
   定义菜单的语法::

    menu_name/ID menu <options>
    BEGIN/{
    	<菜单项列表>
    END/}

   菜单名称或者菜单ID是菜单的唯一标识符，用于程序加载菜单资源；
   options可以为 MOVABLE, DISCARDABLE等等。

   菜单定义体必须包含在 ``BEGIN...END`` 宏之间或者大括号包含的区域内。
   菜单定义体由若干菜单项，菜单分隔符以及子菜单构成。

   菜单项的语法::

    menuitem 菜单项文字, ID[, 选项]

   菜单项文字表示显示在窗口中的菜单项名称；
   ID表示点击菜单项时触发的消息中，wParam参数的低16位数值,
   该数值在所有菜单项中是唯一的。

   选项指定了菜单项的显示方式：

   * CHECKED 菜单项被勾选
   * INACTIVE 菜单项被禁用
   * GRAYED 菜单项被置灰
   * MENUBREAK/MENUBARBREAK 从该菜单项起，之后的菜单项新起一列显示
     
   子菜单的语法::

    popup	子菜单文字[,选项]
    BEGIN/{
    	<菜单项列表>
    END/}

   选项包括：

   * INACTIVE
   * GRAYED
   * HELP
     
   子菜单中的菜单项定义语法和前面一致。

   分隔符语法::

    menuitem separator

2. 加速键资源的定义

   加速键是指窗口快捷键，如文本编辑器中常用 ``ctrl+s`` 保存修改。

   加速键的语法::

    accelerator_name/ID accelerators
    BEGIN/{
    	<加速键单项列表>
    END/}

   加速键名或者加速键ID是加速键资源的唯一标识符，用于程序加载加速键资源。

   加速键单项的定义::

    "字母"/"^字母"/虚拟键/ASCII值, ID[, 类型][, 组合键]

   字母/虚拟键/ASCII值指定键盘按键；
   ID表示使用加速键时触发的消息中，wParam参数的低16位数值，
   该数值在所有加速键单项中是唯一的。
   类型说明：

   +---------+----------------------------------------------+
   | 类型    | 说明                                         |
   +=========+==============================================+
   | ASCII   | 如果使用数值定义加速键，则必须指定此类型。   |
   |         | 例如：65 ID_HELP, ASCII                      |
   +---------+----------------------------------------------+
   | VIRTKEY | 如果使用虚拟值定义加速键，则必须指定此类型。 |
   |         | 例如：VK_F1 ID_HELP, VIRTKEY                 |
   +---------+----------------------------------------------+

   组合键有：``CONTROL``, ``SHIFT`` 和 ``ALT``。
   定义加速键可以有一个或者多个组合键。

   加速键单项的定义，需要注意以下几点：

   * 加速键定义中，字母可以是大写也可以是小写。
     小写指定的是按键，大写指定的是 ``SHIFT+按键``。
     例如：``"s"`` 表示 ``按键s``，``"S"`` 表示：``SHIFT+s``。
     也就是说如果字母是大写，则组合键可以不写 ``SHIFT``。
   * ``"^字母"`` 表示 ``CTRL+按键``。
     例如：``"^s"/"^S"``，表示组合键 ``CTRL+按键s``，
     也就是说组合键SHIFT在这里不起作用，忽略字母大小写。

     .. warning:: 不能用 ``ALT``，否则该加速键不起作用。

   * 指定类型为 ``VIRTKEY`` 时，同样忽略字母大小写。
     例如：``"S", ID_SAVE, VIRTKEY`` 等价于 ``"s", ID_SAVE``，都表示 ``按键s``。
     也就是说如果有类型 ``VIRTKEY``，大写字母不会被翻译成 ``SHIFT+按键``。
     需要用到 ``SHIFT`` 时，必须显示指定 ``SHIFT`` 组合键。

3. 菜单和加速键相关的消息
   
   +------------+---------------+--------------+--------------+
   | 触发者     | 消息          | wParam高位字 | wParam低位字 |
   +============+===============+==============+==============+
   | 系统菜单   | WM_SYSCOMMAND | 0            | 系统菜单ID   |
   +------------+---------------+--------------+--------------+
   | 用户菜单   | WM_COMMAND    | 0            | 用户菜单ID   |
   +------------+---------------+--------------+--------------+
   | 系统加速键 | WM_SYSCOMMAND | 1            | 系统加速键ID |
   +------------+---------------+--------------+--------------+
   | 用户加速键 | WM_COMMAND    | 1            | 用户加速键ID |
   +------------+---------------+--------------+--------------+

.. note::
	右键标题栏触发的弹出式菜单。
	系统加速键是指为系统菜单定义的加速键

4. 加载菜单和加速键
   
   加载菜单：

   .. code-block:: C
   
       HMENU LoadMenu(HINSTANCE hInstance, LPCTSTR lpMenuName)

   其中hInstance表示含有菜单资源的应用实例，一般通过调用函数 ``GetModuleHandle()`` 获取；
   lpMenuName是指资源文件中指定的菜单名称或者菜单ID。
   如果是ID，则该参数高16位为0，低16为为菜单的ID值。

   加载加速键：

   .. code-block:: C
   
       HACCEL LoadAccelerators(HINSTANCE hInstance, LPCTSTR lpTableName)

   参数说明和加载菜单的函数相似，不再重复叙述。